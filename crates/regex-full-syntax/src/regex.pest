// modifiers

natural_number = { ASCII_DIGIT+ }

// count can either be:
// {n}, {n,} {n,a}, {,n}
count = {
	"{" ~
    (natural_number ~ ("," ~ natural_number?)?)
    ~ "}"
}

plus = { "+" }
star = { "*" }
lazy = { "?" }

quantifier = {
	((plus | star | count) ~ lazy?) | lazy
}

// characters

char_linefeed = { "\\n" }
char_carriage_return = { "\\r" }
char_vertical_tab = { "\\v" }
char_form_feed = { "\\f" }
char_horizontal_tab = { "\\t" }
char_digit = { "\\d" }
char_non_digit = { "\\D" }
char_word = { "\\w" }
char_non_word = { "\\W" }
char_whitespace = { "\\s" }
char_non_whitespace = { "\\S" }
char_backslash = { "\\\\" }
char_escaped = { "\\" ~ ASCII }

char = _{
	char_linefeed |
    char_carriage_return |
    char_vertical_tab |
    char_form_feed |
    char_horizontal_tab |
    char_digit |
    char_non_digit |
    char_word |
    char_non_word |
    char_whitespace |
    char_non_whitespace |
    char_backslash |
    char_escaped |
    #symbol = (ASCII_ALPHANUMERIC | " " | ":" | "/" | "#" | "!" | "-" | "^" | "$")
}

char_beginning = { "^" }
char_end = { "$" }
char_any_character = { "." }
all_char = {
    char_beginning |
    char_end |
    char_any_character |
    "{" | "(" | "<" | "[" |
    char
}

range = { #from = all_char ~ "-" ~ #to = all_char }
character_group = { 
	"[" 
    ~ #negated = "^"? 
    ~ (range | all_char)* 
    ~ "]"
    ~ quantifier?
}

characters = { (all_char ~ quantifier?) }

// main grammar
// regex has two parts of its main grammar:
// (expression)
// and expression|expression
// we make alternations a fundamental part of this grammar

group_modifier = {
	#lookahead = "?=" |
    #negative_lookahead = "?!" |
    #lookbehind = "?<=" |
    #negative_lookbehind = "?<!" |
    #non_capturing = "?:"
}
group = { "(" ~ group_modifier? ~ alternation ~ ")" ~ quantifier? }
expression = { (character_group | group | characters)+ }
alternation = { expression ~ ("|" ~ expression)* }

regex = { SOI ~ alternation* ~ EOI }
